#pragma once
#include"DirectXMath.h"

namespace Nero::Math
{
    class Quaternion :public DirectX::XMFLOAT4
    {
    public:
        Quaternion();
        ~Quaternion();

        // 行列の何番目をとるとかをしなくていい。
        // 回転の正面をとる。
        DirectX::XMFLOAT3 GetForward()const;

        // 回転の右をとる。
        DirectX::XMFLOAT3 GetRight()const;

        // 回転の上をとる。
        DirectX::XMFLOAT3 GetUp()const;

        // ベクトルを回転させる。
        DirectX::XMFLOAT3 RotateVector3(const DirectX::XMFLOAT3& v)const;
        Quaternion operator*(const Quaternion& q)const;


        static Quaternion Slerp(const Quaternion& q1, const Quaternion& q2, float t);
        static float Angle(const Quaternion& q1, const Quaternion& q2);

        // クォータニオン作成系
        static Quaternion AngleAxis(const DirectX::XMFLOAT3& axis, float angle);
        static Quaternion RollPitchYaw(float pitch, float yaw, float roll);
        static Quaternion LookTo(const DirectX::XMFLOAT3& vec, const DirectX::XMFLOAT3& up = { 0,1,0 });


    };
}
